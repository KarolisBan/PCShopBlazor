@page "/parts/add"
@using PCShopBlazor.Extension.ViewModels;
@using PCShopBlazor.UI.Services;

@inject ShopService shopService
@inject NavigationManager navManager


<div class="loader" style="@($"opacity: {(loaded ? 0 : 1)};")"></div>

@if (!isAdmin)
{
    <h2>Oops! This user is unauthorized to view this page. (403)</h2>
}
else
{
    <h2>Add a new part</h2>

    @if (loaded)
    {
        <div class="edit-table">
            <div>
                <h3>Manufacturer</h3>
                <input type="text" class="styled-input" placeholder="Manufacturer" spellcheck="false" @bind-value="newPart.Manufacturer" />
            </div>
            <div>
                <h3>Model</h3>
                <input type="text" class="styled-input" placeholder="Model" spellcheck="false" @bind-value="newPart.Model" />
            </div>
            <div>
                <h3>Type</h3>
                <input type="text" class="styled-input" placeholder="Type" spellcheck="false" @bind-value="newPart.Type" />
            </div>
            <div>
                <h3>Value</h3>
                <input type="text" class="styled-input" placeholder="Value" spellcheck="false" @bind-value="newPart.Value" />
            </div>
            <div>
                <h3>Client</h3>
                <select  @bind="newPart.CreatorId" name="Client">
                    @foreach (UserViewModel user in users)
                    {
                        <option value="@user.Id">@user.Name</option>
                    }
                </select>
            </div>
            <div>
                <h3>PC</h3>
                <select  @bind="newPart.ComputerId" name="Computer">
                    @foreach (ComputerViewModel computer in computers)
                    {
                        <option value="@computer.Id">@computer.Name</option>
                    }
                </select>
            </div>
            <div>
                <button @onclick="AddNewPart" class="btn btn-primary">Add a new part</button>
            </div>
        </div>
    }
}





@code {

    PartViewModel newPart;
    IEnumerable<UserViewModel> users;
    IEnumerable<ComputerViewModel> computers;

    bool loaded => newPart != null;
    bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        newPart = new PartViewModel();
        users = await shopService.GetUsersAsync();
        computers = await shopService.GetComputersAsync();
        isAdmin = await shopService.CheckAdmin();

        shopService.ReloadUI += async () => await InvokeAsync(() => StateHasChanged());
    }

    protected async void AddNewPart()
    {
        newPart.Id = await shopService.InsertPartAsync(newPart);
        navManager.NavigateTo("/parts");
    }
}
