@page "/computers/add"
@using PCShopBlazor.Extension.ViewModels;
@using PCShopBlazor.UI.Services;

@inject ShopService shopService
@inject NavigationManager navManager


<div class="loader" style="@($"opacity: {(loaded ? 0 : 1)};")"></div>

@if (!isAdmin)
{
    <h2>Oops! This user is unauthorized to view this page. (403)</h2>
}
else
{
    <h2>Add a new computer</h2>

    @if (loaded)
    {
        <div class="edit-table">
            <div>
                <h3>PC Name</h3>
                <input type="text" class="styled-input" placeholder="PC Name" spellcheck="false" @bind-value="newComputer.Name" />
            </div>
            <div>
                <h3>Manufacturer</h3>
                <input type="text" class="styled-input" placeholder="Manufacturer" spellcheck="false" @bind-value="newComputer.Manufacturer" />
            </div>
            <div>
                <h3>Price</h3>
                <input type="number" class="styled-input" placeholder="Price" spellcheck="false" @bind-value="newComputer.Price" />
            </div>
            <div>
                <h3>Client</h3>
                <select  @bind="newComputer.CreatorId" name="Orders">
                    @foreach (UserViewModel user in users)
                    {
                        <option value="@user.Id">@user.Name</option>
                    }
                </select>
            </div>
            <div>
                <h3>Order number</h3>
                <select  @bind="newComputer.OrderId" name="Orders">
                    @foreach (OrderViewModel order in orders)
                    {
                        <option value="@order.Id">@order.OrderNumber</option>
                    }
                </select>
            </div>
            <div>
                <button @onclick="AddNewComputer" class="btn btn-primary">Add a new computer</button>
            </div>
        </div>
    }
}





@code {
    //[CascadingParameter] public IModalService Modal { get; set; }

    ComputerViewModel newComputer;
    IEnumerable<OrderViewModel> orders;
    IEnumerable<UserViewModel> users;

    bool loaded => newComputer != null;
    bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        newComputer = new ComputerViewModel();
        orders = await shopService.GetOrdersAsync();
        users = await shopService.GetUsersAsync();
        isAdmin = await shopService.CheckAdmin();

        shopService.ReloadUI += async () => await InvokeAsync(() => StateHasChanged());
    }

    protected async void AddNewComputer()
    {
        newComputer.Id = await shopService.InsertComputerAsync(newComputer);
        navManager.NavigateTo("/computers");
    }
}
