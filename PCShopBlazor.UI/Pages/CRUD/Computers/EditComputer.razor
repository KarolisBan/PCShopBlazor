@page "/computers/edit/{ComputerId:int}"
@using PCShopBlazor.Extension.ViewModels;
@using PCShopBlazor.UI.Services;

@inject ShopService shopService
@inject NavigationManager navManager


<div class="loader" style="@($"opacity: {(loaded ? 0 : 1)};")"></div>

@if (isAdmin)
{
    <h2>Oops! This user is unauthorized to view this page. (403)</h2>
}
else if (notFound)
{
    <h2>Oops! The computer does not exist! (404)</h2>
}
else
{
    <h2>Edit an existing computer</h2>

    @if (loaded)
    {
        <div class="edit-table">
            <div>
                <h3>Name</h3>
                <input type="text" class="styled-input" placeholder="Name" spellcheck="false" @bind-value="editedComputer.Name" />
            </div>
            <div>
                <h3>Manufacturer</h3>
                <input type="text" class="styled-input" placeholder="Manufacturer" spellcheck="false" @bind-value="editedComputer.Manufacturer" />
            </div>
            <div>
                <h3>Price</h3>
                <input type="text" class="styled-input" placeholder="Price" spellcheck="false" @bind-value="editedComputer.Price" />
            </div>
            <div>
                <h3>Client</h3>
                <select  @bind="editedComputer.CreatorId" name="Orders">
                    @foreach (UserViewModel user in users)
                    {
                        <option value="@user.Id">@user.Name</option>
                    }
                </select>
            </div>
            <div>
                <h3>Order number</h3>
                <select  @bind="editedComputer.OrderId" name="Orders">
                    @foreach (OrderViewModel order in orders)
                    {
                        <option value="@order.Id">@order.OrderNumber</option>
                    }
                </select>
            </div>
            <div>
                <button @onclick="EditCurrentComputer" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    }
}





@code {

    [Parameter] public int ComputerId { get; set; }
    ComputerViewModel editedComputer;
    IEnumerable<OrderViewModel> orders;
    IEnumerable<UserViewModel> users;
    bool isAdmin;

    bool loaded = false;
    bool notFound = false;

    protected override async Task OnInitializedAsync()
    {
        isAdmin = await shopService.CheckAdmin();
        editedComputer = await shopService.GetComputersAsync(ComputerId);
        orders = await shopService.GetOrdersAsync();
        users = await shopService.GetUsersAsync();
        if (editedComputer is null)
        {
            notFound = true;
        }
        loaded = true;
    }

    protected async void EditCurrentComputer()
    {
        var response = await shopService.UpdateComputerAsync(editedComputer);
        navManager.NavigateTo("/computers");
    }
}
